HISTFILE=~/.histfile HISTSIZE=10000
SAVEHIST=10000
#setopt notify
#unsetopt beep nomatch
setopt autocd

autoload -Uz compinit
autoload -U colors && colors
compinit

# End of lines added by compinstall

eval `dircolors`

# PS1 and PS2
export PS1="%{$fg_bold[green]%}%n@%m%{$reset_color%} %{$fg_bold[blue]%}%1~%{$reset_color%} $ "
#export PS1="%{$fg_bold[green]%}%n%{$reset_color%}@%{$fg_bold[green]%}%m%{$reset_color%} %{$fg_bold[blue]%}%1~%{$reset_color%} $ "
export PS2="%{$fg[blue]%}$%{$reset_color%}"

export RPROMPT=$'%F{cyan}%*%f'

# Vars used later on by zsh
export EDITOR=vim

# allow approximate
zstyle ':completion:*' completer _complete _match _approximate
zstyle ':completion:*:match:*' original only
zstyle ':completion:*:approximate:*' max-errors 1 numeric

# tab completion for PID :D
zstyle ':completion:*:*:kill:*' menu yes select
zstyle ':completion:*:kill:*' force-list always

# cd not select parent dir. 
zstyle ':completion:*:cd:*' ignore-parents parent pwd

#Keybindings
bindkey -v
typeset -g -A key
bindkey '^?' backward-delete-char
bindkey '^[[1~' beginning-of-line
bindkey '^[[5~' up-line-or-history
bindkey '^[[3~' delete-char
bindkey '^[[4~' end-of-line
bindkey '^[[6~' down-line-or-history
bindkey '^[[A' up-line-or-search
bindkey '^[[D' backward-char
bindkey '^[[B' down-line-or-search
bindkey '^[[C' forward-char 
bindkey '^R' history-incremental-search-backward
# completion in the middle of a line
bindkey '^i' expand-or-complete-prefix
bindkey '^[[7~' beginning-of-line
bindkey '^[[8~' end-of-line


alias ls='ls --color=auto'
alias ll='ls -l'
alias lla='ls -la'
alias la='ls -a'
alias dir='ls -l'
alias mv="mv -i"
alias cp="cp -i"
alias rm="rm -i"
alias poweroff="sudo /sbin/shutdown -h now"
alias halt="sudo /sbin/shutdown -h now"
alias reboot="sudo /sbin/reboot"
alias shutdown="sudo /sbin/shutdown"
alias umount="sudo /sbin/umount"
alias htop="sudo /usr/bin/htop"
alias yum="sudo yum"
alias vimro="vim -R"
#alias ack="ack-grep"

# custom env vars
alias please="sudo"

function hist() {
    egrep $1 ~/.histfile;
}

function siqrefresh() {
    workdir=`pwd`

    for proj; do
        cd "$SIQ_PROJECT_PATH/$proj"
        if [ -d '.git' ]; then
            echo "Performing 'git pull -rebase' on $proj..."
            git pull --rebase 
            #git pull --rebase origin master
        elif [ -d '.svn' ]; then
            echo "Performing 'svn up' on $proj..."
            svn up
        fi
    done
    cd "$workdir"
}

function siqdeploy() {
    workdir=`pwd`

    siq util
    for proj; do
        bake spire.schema.deploy drop=True schema=$proj config=appstack-dev/uwsgi-$proj.yaml
    done
    cd "$workdir"
}
function siqgit() {
    workdir=`pwd`
    gitarg=$1

    for proj in ${@:2}; do
        cd "$SIQ_PROJECT_PATH/$proj"
        echo "Performing 'git $gitarg' on $proj..."
        eval "git $gitarg"
    done
    cd "$workdir"
}

function siq() {
    workon siq
    #export PATH=$SIQ_PROJECT_PATH/bake/bin:$PATH
    export PATH=$SIQ_PROJECT_PATH/bin:$PATH
    export BAKE_MODULES="spire.tasks mesh.tasks"

    if [ "$1" ]; then
        cd $1
    fi
    settitle ${PWD##*/};
}
function _siq() { _files -W $SIQ_PROJECT_PATH; }
compdef _siq siq

function desiq() {
    unset BAKE_MODULES
    deactivate
}

function settitle() {
    if [ -n "$TMUX" ]; then
        printf "\033k$1\033\\"
    fi
}

function ssh() {
    export _OLD_TERM=$TERM
    cd $HOME
    settitle "$*"
    if [ -n "$TMUX" ]; then
        export TERM=xterm-256color
    fi
    command ssh "$@"
    export TERM=$_OLD_TERM
    settitle ${PWD##*/}
}

function nukepyc() {
    find . -name \*.pyc
    find . -name \*.pyc -delete
}

settitle ${PWD##*/}

fortune -e
