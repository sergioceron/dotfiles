HISTFILE=~/.histfile
HISTSIZE=10000
SAVEHIST=10000
#setopt notify
#unsetopt beep nomatch
setopt autocd

autoload -Uz compinit
autoload -U colors && colors
compinit

# End of lines added by compinstall

#eval `dircolors`

# PS1 and PS2
export PS1="%{$fg_bold[green]%}%n@%m%{$reset_color%} %{$fg_bold[blue]%}%1~%{$reset_color%} $ "
#export PS1="%{$fg_bold[green]%}%n%{$reset_color%}@%{$fg_bold[green]%}%m%{$reset_color%} %{$fg_bold[blue]%}%1~%{$reset_color%} $ "
export PS2="%{$fg[blue]%}$%{$reset_color%}"

# Vars used later on by zsh
export EDITOR=vim

# allow approximate
zstyle ':completion:*' completer _complete _match _approximate
zstyle ':completion:*:match:*' original only
zstyle ':completion:*:approximate:*' max-errors 1 numeric

# tab completion for PID :D
zstyle ':completion:*:*:kill:*' menu yes select
zstyle ':completion:*:kill:*' force-list always

# cd not select parent dir. 
zstyle ':completion:*:cd:*' ignore-parents parent pwd

#Keybindings
bindkey -v
typeset -g -A key
bindkey '^?' backward-delete-char
bindkey '^[[1~' beginning-of-line
bindkey '^[[5~' up-line-or-history
bindkey '^[[3~' delete-char
bindkey '^[[4~' end-of-line
bindkey '^[[6~' down-line-or-history
bindkey '^[[A' up-line-or-search
bindkey '^[[D' backward-char
bindkey '^[[B' down-line-or-search
bindkey '^[[C' forward-char 
bindkey '^R' history-incremental-search-backward
# completion in the middle of a line
bindkey '^i' expand-or-complete-prefix
bindkey '^[[7~' beginning-of-line
bindkey '^[[8~' end-of-line


#alias ls='ls --color=auto'
alias dir='ls -l'
alias la='ls -a'
alias ll='ls -l'
alias lla='ls -la'
alias mv="mv -i"
alias cp="cp -i"
alias rm="rm -i"
alias poweroff="sudo /sbin/halt"
alias halt="sudo /sbin/halt"
alias reboot="sudo /sbin/reboot"
alias shutdown="sudo /sbin/shutdown"
alias umount="sudo /sbin/umount"
alias htop="sudo /usr/local/bin/htop"
alias vimro="vim -R"

# custom env vars
alias please="sudo"
alias mkvirtualenv="PATH=$HOME/.local/bin:$PATH mkvirtualenv"
alias mkworkenv="work; mkvirtualenv --system-site-packages $@"

function hist() {
    egrep $1 ~/.histfile;
}

function settitle() {
    if [ -n "$TMUX" ]; then
        if [ "$1" ]; then
            printf "\033k$1\033\\"
        else
            settitle ${PWD##*/}
        fi
    fi
}

function ssh() {
    export _OLD_TERM=$TERM
    cd $HOME
    settitle "$*"
    if [ -n "$TMUX" ]; then
        export TERM=xterm-256color
    fi
    command ssh "$@"
    export TERM=$_OLD_TERM
    settitle ${PWD##*/}
}

function nukepyc() {
    find . -name \*.pyc
    find . -name \*.pyc -delete
}

function gitall() {}

function goenv() {
    if [ -z "_GOENV" ]; then
        go_proj="$PROJECT_HOME/$1"
        mkdir -p "$go_proj"

        cd $go_proj
        settitle $1

        export GOPATH=$go_proj
        export $_GOENV_OLDPATH=$PATH
        export PATH=$PATH:$GOPATH/bin
        export _GOENV=$1
    fi
}

function dego() {
    if [ -n "_GOENV" ]; then
        unset $_GOENV
        unset $GOPATH
        export PATH=$_GOENV_OLDPATH
        cd $HOME
    fi
}

settitle ${PWD##*/}

# TODO: make more generic
function yabl() {
    workon yabl

    if [ "$1" ]; then
        cd $1
    fi
    settitle
}
function _yabl() { _files -W $HOME/p/yabl; }
compdef _yabl yabl

function mother() {
    cd $HOME/p/mother

    if [ "$1" ]; then
        cd $1
    fi
    settitle
}
function _mother() { _files -W $HOME/p/mother; }
compdef _mother mother

function work() {
    cd $HOME/Projects/$1
    settitle $1
}
function _work() { _files -W $HOME/Projects; }
compdef _work work 

fortune -e
